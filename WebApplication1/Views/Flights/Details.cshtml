@model Flight

@{
    ViewData["Title"] = "Flight Details";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<style>
    .plane {
        filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.3));
    }
</style>

<div class="container py-4">
    <h1 class="mb-4 text-center">Flight Details</h1>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <strong>Flight Number:</strong> @Model.FlightNumber <br />
                    <strong>Airline:</strong> @Model.Airline <br />
                    <strong>Status:</strong> @Model.Status <br />
                    <strong>Type:</strong> @Model.Type <br />
                    <strong>Aircraft ID:</strong> @Model.Aircraft?.Id
                </div>
                <div class="col-md-6">
                    <strong>Departure Airport:</strong> @Model.DepartureAirport?.Name (@Model.DepartureAirport?.Name) <br />
                    <strong>Arrival Airport:</strong> @Model.ArrivalAirport?.Name (@Model.ArrivalAirport?.Name) <br />
                    <strong>Departure Time:</strong> @Model.DepartureTime.ToString("g") <br />
                    <strong>Arrival Time:</strong> @Model.ArrivalTime.ToString("g") <br />
                    @if (!string.IsNullOrEmpty(Model.AirlineLogoUrl))
                    {
                        <strong>Logo:</strong>

                        <br />
                        <img src="@Model.AirlineLogoUrl" alt="Airline Logo" style="max-height: 50px;" />
                    }
                </div>
            </div>
        </div>
    </div>

    <h4 class="mb-3 text-center">Flight Route</h4>
    <div id="map" style="height: 400px; border-radius: 12px; overflow: hidden;" class="mb-4 shadow-sm"></div>

    <div class="text-center">
        <a class="btn btn-outline-primary me-2" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
        <a class="btn btn-outline-secondary" asp-action="Index">Back to List</a>
    </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
    function toRad(deg) {
        return deg * Math.PI / 180;
    }

    function toDeg(rad) {
        return rad * 180 / Math.PI;
    }

    function interpolateGreatCircle(start, end, numPoints) {
        const lat1 = toRad(start[0]);
        const lon1 = toRad(start[1]);
        const lat2 = toRad(end[0]);
        const lon2 = toRad(end[1]);

        const d = 2 * Math.asin(Math.sqrt(Math.sin((lat2 - lat1) / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin((lon2 - lon1) / 2) ** 2));
        const points = [];

        for (let i = 0; i <= numPoints; i++) {
            const f = i / numPoints;
            const A = Math.sin((1 - f) * d) / Math.sin(d);
            const B = Math.sin(f * d) / Math.sin(d);

            const x = A * Math.cos(lat1) * Math.cos(lon1) + B * Math.cos(lat2) * Math.cos(lon2);
            const y = A * Math.cos(lat1) * Math.sin(lon1) + B * Math.cos(lat2) * Math.sin(lon2);
            const z = A * Math.sin(lat1) + B * Math.sin(lat2);

            const lat = Math.atan2(z, Math.sqrt(x * x + y * y));
            const lon = Math.atan2(y, x);

            points.push([toDeg(lat), toDeg(lon)]);
        }

        return points;
    }

    const dep = { lat: parseFloat('@ViewBag.DepartureLat'), lng: parseFloat('@ViewBag.DepartureLng'), iata: '@ViewBag.DepartureIATA' };
    const arr = { lat: parseFloat('@ViewBag.ArrivalLat'), lng: parseFloat('@ViewBag.ArrivalLng'), iata: '@ViewBag.ArrivalIATA' };
    const stopovers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Stopovers ?? new List<object>()));

    const routePoints = [dep, ...stopovers, arr];

    if (routePoints.every(p => !isNaN(p.lat) && !isNaN(p.lng))) {
        const map = L.map('map').setView([dep.lat, dep.lng], 3);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        const planeIcon = L.icon({
            iconUrl: '/downloads/Plane.png',
            iconSize: [24, 24],
            iconAnchor: [12, 12],
            className: 'plane'
        });

        const markers = [];
        routePoints.forEach((point, i) => {
            const marker = L.marker([point.lat, point.lng]).addTo(map)
                .bindPopup(`<strong>${i === 0 ? 'Departure' : (i === routePoints.length - 1 ? 'Arrival' : 'Stopover')}</strong>: ${point.iata}`)
                .on('click', function () { map.setView(this.getLatLng(), 6); });
            markers.push(marker);
        });

        const pathPoints = [];
        for (let i = 0; i < routePoints.length - 1; i++) {
            const segment = interpolateGreatCircle(
                [routePoints[i].lat, routePoints[i].lng],
                [routePoints[i + 1].lat, routePoints[i + 1].lng],
                100
            );
            pathPoints.push(...segment);
        }

        const routeLine = L.polyline(pathPoints, {
            color: 'blue',
            weight: 3,
            opacity: 0.7,
            smoothFactor: 1
        }).addTo(map);

        const planeMarker = L.marker([dep.lat, dep.lng], { icon: planeIcon }).addTo(map);

        let step = 0;
        const maxStep = pathPoints.length - 1;

        function animatePlane() {
            planeMarker.setLatLng(pathPoints[step]);
            step = (step + 1) % maxStep;
            requestAnimationFrame(animatePlane);
        }

        animatePlane();

        const bounds = L.latLngBounds(pathPoints);
        map.fitBounds(bounds.pad(0.5));

    } else {
        document.getElementById("map").innerHTML =
            "<p class='text-danger text-center pt-5'>Unable to load map. Coordinates missing.</p>";
    }
</script>

